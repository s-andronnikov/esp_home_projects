esphome:
  name: luatos-esp32c3-ens160
  friendly_name: esp32c3-ens160
  platformio_options:
    # flash_mode defaults to qio, but Air101/LuatOS requires dio mode
    board_build.f_flash: 40000000L
    board_build.flash_mode: dio
    board_build.flash_size: 4MB

# esp32:
#   board: esp32-c3-devkitm-1
#   framework:
#     type: arduino

esp32:
  # variant: ESP32C3
  board: airm2m_core_esp32c3
  framework:
    type: esp-idf
#    version: 5.3.1
#    platform_version: 6.9.0
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_4MB: y

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret esphome_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp32C3-Ens160"
    password: !secret wifi_ap_password

# esp32_ble_server:
  # manufacturer: "luatos_esp32c3_test"
  # manufacturer_data: [0x4C, 0, 0x23, 77, 0xF0 ]

# esp32_ble:
#   io_capability: keyboard_only
#   enable_on_boot: true

# web_server:
#   port: 80

output:
  - platform: gpio
    id: power_led
    pin: 
      number: GPIO12
      ignore_pin_validation_error: true
      # inverted: True
      mode: OUTPUT   

status_led:
  pin:
    number: GPIO13
    # inverted: true
    ignore_pin_validation_error: true

button:
  - platform: restart
    name: "Restart"

# binary_sensor:    
#   - platform: status
#     name: Status
#   - platform: gpio
#     name: Boot Switch
#     pin: 
#       number: GPIO00
#       inverted: true
#       mode:
#         input: true
#         pullup: true

i2c:
  sda: GPIO04
  scl: GPIO05
  scan: true
  id: bus_i2c

sensor:
  - platform: aht10
    id: aht21_sensor
    variant: AHT20
    temperature:
      id: id_temperature_sensor
      name: "Temperature"
    humidity:
      id: id_humidity_sensor
      name: "Humidity"
    update_interval: 55s

  - platform: ens160_i2c
    eco2:
      name: "eCO2"
    tvoc:
      name: "TVOC"
    aqi:
      id: ens160_air_quality_index
      name: "Air Quality Index"
    update_interval: 60s
    address: 0x53
    compensation:
      temperature: id_temperature_sensor
      humidity: id_humidity_sensor

  # Uptime sensor
  - platform: uptime
    id: sys_uptime
    type: seconds
    name: Uptime Sensor    
    entity_category: "diagnostic"

# Example configuration entry with 2 sensors and filter
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""

  # Internal Temperature Sensor
  - platform: internal_temperature
    id: esp_internal_temperature
    name: "Internal Temperature"
    entity_category: "diagnostic"

  # Free memory
  - platform: template
    id: esp_memory
    icon: mdi:memory
    name: Free Memory
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: 'kB'
    state_class: measurement
    entity_category: "diagnostic"

text_sensor:
  - platform: template
    name: "Air Quality Rating"
    lambda: |-
      switch ( (int) (id(ens160_air_quality_index).state) ) {
        case 1: return {"Excellent"};
        case 2: return {"Good"};
        case 3: return {"Moderate"};
        case 4: return {"Poor"};
        case 5: return {"Unhealthy"};
        default: return {"Not Available"};
      }

  - platform: wifi_info
    ip_address:
      name: IP Address
    # ssid:
    #   name: Connected SSID
    # bssid:
    #   name: Connected BSSID
    mac_address:
      name: Mac Wifi Address
    # scan_results:
    #   name: Latest Scan Results
    # dns_address:
    #   name: DNS Address

captive_portal:
