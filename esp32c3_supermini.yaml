# https://www.sudo.is/docs/esphome/boards/esp32c3supermini/
substitutions:
  device_name:     esp32c3_supermini
  friendly_name:   ESP32C3 Super Mini
  global_update_interval: 60s

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  platformio_options:
    board_build.f_flash: 40000000L
    board_build.flash_mode: dio
    board_build.flash_size: 4MB
  on_boot:
    priority: -100.0
    then:
      - component.update: battery_voltage
      - component.update: battery_level
      - component.update: sys_uptime
      - component.update: wifi_signal_db
      - component.update: esp_internal_temperature
      - component.update: esp_memory
      - delay: !lambda "return id(run_duration_number).state * 1000;"
      - script.execute: trigger_deep_sleep

esp32:
  board: esp32-c3-devkitm-1
  variant: ESP32C3
  framework:
    type: esp-idf
    version: 5.3.1 # https://github.com/espressif/esp-idf/releases
    platform_version: 6.9.0 # https://github.com/platformio/platform-espressif32/releases/
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_4MB: y

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: HIGH

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: Fallback ${device_name}
    password: !secret wifi_ap_password

ota:
  - platform: esphome
    password: !secret esphome_ota_password

# Enable logging
# logger:

captive_portal:

# web_server:
#  port: 80

status_led:
  pin:
    number: GPIO8
    inverted: true

button:
  - platform: restart
    name: "Restart"

number:
  - platform: template
    name: "DS Duration (min)"
    id: sleep_duration_number
    unit_of_measurement: "min"
    min_value: 1
    max_value: 60
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 15

  - platform: template
    name: "Run Duration (sec)"
    id: run_duration_number
    unit_of_measurement: "s"
    min_value: 5
    max_value: 60
    step: 5
    optimistic: true
    restore_value: true
    initial_value: 15  # Default run duration is 5 seconds

switch:
  - platform: template
    name: "Deep Sleep Enable"
    id: deep_sleep_enable
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON  # Changed to restore_mode for compatibility with ESPHome 2024.10
    on_turn_on:
      - delay: !lambda "return id(run_duration_number).state * 1000;"
      - script.execute: trigger_deep_sleep
    on_turn_off:
      - lambda: |-
          ESP_LOGD("deep_sleep", "Deep sleep disabled, remaining awake.");


deep_sleep:
  id: deep_sleep_control
  run_duration: 30s # default running duration
  sleep_duration: 10min  # Default duration for deep sleep


script:
  - id: trigger_deep_sleep
    mode: queued
    then:
      - if:
          condition:
            switch.is_on: deep_sleep_enable
          then:
            - lambda: |-
                ESP_LOGD("deep_sleep", "All sensors have submitted values, going to deep sleep now.");
            - deep_sleep.enter:
                id: deep_sleep_control
                sleep_duration: !lambda "return id(sleep_duration_number).state * 60 * 1000;"                  
          else:
            - lambda: |-
                ESP_LOGD("deep_sleep", "Deep sleep is disabled, skipping.");

sensor:
  - platform: adc
    id: battery_voltage
    pin: GPIO1
    name: "Battery Voltage"
    entity_category: "diagnostic"
    attenuation: 11db
    filters:
      - multiply: 1.7341
    update_interval: ${global_update_interval}

  - platform: template
    name: "Battery Level"
    id: battery_level
    unit_of_measurement: "%"
    device_class: battery
    entity_category: "diagnostic"
    lambda: |-
      if (id(battery_voltage).state > 4.2) {
        return 100.0;
      } else if (id(battery_voltage).state < 3.0) {
        return 0.0;
      } else {
        return (id(battery_voltage).state - 3.0) / (4.2 - 3.0) * 100.0;
      }
    update_interval: ${global_update_interval}

  # Uptime sensor
  - platform: uptime
    id: sys_uptime
    type: seconds
    name: Uptime Sensor
    entity_category: "diagnostic"
    update_interval: ${global_update_interval}

  # WiFi signal sensors
  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    entity_category: "diagnostic"

  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

  # Internal Temperature Sensor
  - platform: internal_temperature
    id: esp_internal_temperature
    name: "Internal Temperature"
    entity_category: "diagnostic"
    update_interval: ${global_update_interval}

  # Free memory
  - platform: template
    id: esp_memory
    icon: mdi:memory
    name: Free Memory
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: 'kB'
    state_class: measurement
    entity_category: "diagnostic"
    update_interval: ${global_update_interval}
